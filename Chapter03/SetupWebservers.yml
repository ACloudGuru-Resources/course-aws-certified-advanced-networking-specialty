Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-09d069a04349dc3cb
    us-east-2:
      AMI: ami-0d542ef84ec55d71c
    us-west-1:
      AMI: ami-04bc3da8f14823e88
    us-west-2:
      AMI: ami-01460aa81365561fe
Resources:
  # Create the VPC
  LnCustomVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-application-vpc-acg'
  
  # Create each of the subnet
  LnPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-alb-a'
      VpcId: !Ref LnCustomVPC
  LnPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.8.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-alb-b'
      VpcId: !Ref LnCustomVPC
  LnPrivateWebserverSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-webserver-a'
      VpcId: !Ref LnCustomVPC
  LnPrivateWebserverSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.9.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-webserver-b'
      VpcId: !Ref LnCustomVPC

  # Create each of the security groups
  LnSecurityGroupForALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group created with CF template for Application Load Balancer.
      VpcId : !Ref LnCustomVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-application-load-balancer-sg'
        - Key: Description
          Value: !Sub 'Security Group created for Application Load Balancer with ${AWS::StackName}.'
  LnSecurityGroupWebservers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security Group created with CF template for web servers.'
      VpcId : !Ref LnCustomVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LnSecurityGroupForALB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-webserver-sg'
        - Key: Description
          Value: !Sub 'Security Group created for web servers with ${AWS::StackName}.'

  # Create Internet gateway
  LnInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-internet-gateway'
  
  # Attach IGW
  LnAttachIGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref LnInternetGateway
      VpcId: !Ref LnCustomVPC
  
  # Create Elastic IP addresses
  LnElasticIPForNatA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-EIP-NAT-gateway-a'
  LnElasticIPForNatB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-EIP-NAT-gateway-b'

  # Create NAT Gateways
  LnCreateNatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt LnElasticIPForNatA.AllocationId
      SubnetId: !Ref LnPublicSubnetA
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-NAT-gateway-a'
  LnCreateNatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt LnElasticIPForNatB.AllocationId
      SubnetId: !Ref LnPublicSubnetB
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-NAT-gateway-b'
  
  # Create all the routing tables
  LnPublicRouteTableALBA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref LnCustomVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt-a'
  LnPublicRouteTableALBB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref LnCustomVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt-b'
  LnPrivateRouteTableWebserverA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref LnCustomVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-rt-webserver-a'
  LnPrivateRouteTableWebserverB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref LnCustomVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-rt-webserver-b'
  # Add IGW to route to our tables public traffic
  LnAddIGWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LnPublicRouteTableALBA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LnInternetGateway
  LnAddIGWInternetRuleB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LnPublicRouteTableALBB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LnInternetGateway
  
  # Add NAT gateway routes to route tables
  LnAddNATRoutingRuleWebserverA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LnPrivateRouteTableWebserverA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LnCreateNatGatewayA
  LnAddNATRoutingRuleWebserverB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LnPrivateRouteTableWebserverB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LnCreateNatGatewayB

  # Make subnet association with route tables
  LnAssociatePublicSubnetAWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref LnPublicRouteTableALBA
      SubnetId: !Ref LnPublicSubnetA
  LnAssociatePublicSubnetBWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref LnPublicRouteTableALBB
      SubnetId: !Ref LnPublicSubnetB
  LnAssociatePrivateWebserverASubnetWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref LnPrivateRouteTableWebserverA
      SubnetId: !Ref LnPrivateWebserverSubnetA
  LnAssociatePrivateWebserverBSubnetWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref LnPrivateRouteTableWebserverB
      SubnetId: !Ref LnPrivateWebserverSubnetB

  # Start creating Infrastructure
  LnEC2InstanceWS1V1:
    Type: AWS::EC2::Instance
    DependsOn:
      - LnCreateNatGatewayA
      - LnAttachIGWtoVPC
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Sub '${AWS::StackName}', 'app-server', 'instance', '1', 'v1'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroupWebservers
      SubnetId: !Join [ ',', [!Ref LnPrivateWebserverSubnetA] ]
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "yum update -y\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnEC2InstanceWS1V1 ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          InstallAndConfigure:
            - "install_dependecies"
            - "get_html"
            - "create_landing_page"
        install_dependecies: 
          packages: 
            yum: 
              httpd: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
          commands:
            test:
              command: yum install git -y
        get_html:
          commands:
            test:
              command: git clone https://github.com/ACloudGuru-Resources/course-aws-certified-advanced-networking-specialty
              cwd: /home/ec2-user
        create_landing_page: 
          commands: 
            test: 
              command: cp -r -n ./Chapter03/html/blue/* /var/www/html/
              cwd: /home/ec2-user/course-aws-certified-advanced-networking-specialty
  LnEC2InstanceWS2V1:
    Type: AWS::EC2::Instance
    DependsOn:
      - LnCreateNatGatewayB
      - LnAttachIGWtoVPC
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Sub '${AWS::StackName}', 'app-server', 'instance', '2', 'v1'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroupWebservers
      SubnetId: !Join [ ',', [!Ref LnPrivateWebserverSubnetB] ]
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "yum update -y\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnEC2InstanceWS2V1 ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          InstallAndConfigure:
            - "install_dependecies"
            - "get_html"
            - "create_landing_page"
        install_dependecies: 
          packages: 
            yum: 
              httpd: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
          commands:
            test:
              command: yum install git -y
        get_html:
          commands:
            test:
              command: git clone https://github.com/ACloudGuru-Resources/course-aws-certified-advanced-networking-specialty
              cwd: /home/ec2-user
        create_landing_page: 
          commands: 
            test: 
              command: cp -r -n ./Chapter03/html/blue/* /var/www/html/
              cwd: /home/ec2-user/course-aws-certified-advanced-networking-specialty
  LnEC2InstanceWS1V2:
    Type: AWS::EC2::Instance
    DependsOn:
      - LnCreateNatGatewayA
      - LnAttachIGWtoVPC
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Sub '${AWS::StackName}', 'app-server', 'instance', '1', 'v2'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroupWebservers
      SubnetId: !Join [ ',', [!Ref LnPrivateWebserverSubnetA] ]
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "yum update -y\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnEC2InstanceWS1V2 ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          InstallAndConfigure:
            - "install_dependecies"
            - "get_html"
            - "create_landing_page"
        install_dependecies: 
          packages: 
            yum: 
              httpd: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
          commands:
            test:
              command: yum install git -y
        get_html:
          commands:
            test:
              command: git clone https://github.com/ACloudGuru-Resources/course-aws-certified-advanced-networking-specialty
              cwd: /home/ec2-user
        create_landing_page: 
          commands: 
            test: 
              command: cp -r -n ./Chapter03/html/green/* /var/www/html/
              cwd: /home/ec2-user/course-aws-certified-advanced-networking-specialty
  LnEC2InstanceWS2V2:
    Type: AWS::EC2::Instance
    DependsOn:
      - LnCreateNatGatewayB
      - LnAttachIGWtoVPC
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Sub '${AWS::StackName}', 'app-server', 'instance', '2', 'v2'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroupWebservers
      SubnetId: !Join [ ',', [!Ref LnPrivateWebserverSubnetB] ]
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "yum update -y\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnEC2InstanceWS2V2 ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          InstallAndConfigure:
            - "install_dependecies"
            - "get_html"
            - "create_landing_page"
        install_dependecies: 
          packages: 
            yum: 
              httpd: []
          services: 
            sysvinit: 
              httpd: 
                enabled: true
                ensureRunning: true
          commands:
            test:
              command: yum install git -y
        get_html:
          commands:
            test:
              command: git clone https://github.com/ACloudGuru-Resources/course-aws-certified-advanced-networking-specialty
              cwd: /home/ec2-user
        create_landing_page: 
          commands: 
            test: 
              command: cp -r -n ./Chapter03/html/green/* /var/www/html/
              cwd: /home/ec2-user/course-aws-certified-advanced-networking-specialty