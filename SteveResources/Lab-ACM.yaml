---
AWSTemplateFormatVersion: '2010-09-09'
## Version 1     
## EC2 instances placed in private subnets, behind NAT Gateway.
## Classic Load Balancer

## Version 2
## CLB replaced with ALB, Listener, and Target Group.
## ASG configured to add instances to Target Group.

## Version 3
## Removed Private Subnets and NAT Gateway
## ASG and ALB using public subnets only.

## Version 3.1
## LaunchConfig enables AutoPublicIP

## Version 3.2
## Nest Security Groups to restrict EC2 access from ALB only

## Version 4
## Adds CloudFormation Distribution using ALB as origin

Parameters:
  PrivateKeyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the instances.


  AmazonLinuxAMIID: # retreived from the SSM Parameter Store in the current region
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2


Resources:

###### Network ######

  # First, A VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""   # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Public Subnet 2
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for the ALB.  Allow HTTP from anywhere:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: ALBSecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

  # Security Group for the Web servers.  Allow HTTP only from ALB:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebSecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !Ref ALBSecurityGroup

###### EC2 Infrastructure ######        
      
  # Launch Configuration for our web server running within an ASG:            
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmazonLinuxAMIID                                               # We get the AMI-ID from the input parameter
      KeyName: !Ref PrivateKeyName                                                 # We get the keypair name from the input parameters
      InstanceType: t2.micro 
      AssociatePublicIpAddress: 'true'    
      SecurityGroups:
      - !Ref WebServerSecurityGroup                                                # Plug in the security group.
      UserData:      #  This code downloads a PHP app. Notice how the last line signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum -y install httpd php stress
          chkconfig httpd on
          wget https://s3-us-west-2.amazonaws.com/devnewb-mysites/metadatapage-acg.zip
          unzip metadatapage-acg.zip -d /var/www/html/
          service httpd start
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl start amazon-ssm-agent
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
    - AttachGateway
    Properties:
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 2        
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: ApplicationRole
        Value: OurWebApp
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: MetaData-v3_2
        PropagateAtLaunch: 'true'
      TargetGroupARNs: 
      - !Ref MetaServerTG

    # This creation policy says 'this resource is not really created until you get X signals back'.
    # Best to make the number of signals match the minimum or desired capacity of the ASG.
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT10M
        
  # Application Load Balancer:        
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Type: application

# HTTP Listener for ALB, default action is to forward traffic to target group
  MetaServerTGListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
      - Type: forward
        TargetGroupArn: !Ref MetaServerTG
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: "HTTP"

# ALB Target Group.  Includes Health Check settings and target type.  No specific instances are defined.
  MetaServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher: 
       HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC


# CLOUDFRONT DISTRIBUTION
  CFDistro:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront Distribution pointing ALB Origin'
        Origins:
          - DomainName: !GetAtt 'AppLoadBalancer.DNSName'
            Id: !Ref 'AppLoadBalancer'
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: 'http-only'
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
                - SSLv3
        Enabled: true
        HttpVersion: 'http2'
        DefaultCacheBehavior:
          TargetOriginId: !Ref 'AppLoadBalancer'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: 'allow-all'
       
# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Join ['', ["http://", !GetAtt AppLoadBalancer.DNSName ]]

  CLDistroEndpoint:
    Description:  The URL for our CloudFront distribution
    Value: !Join ['', ["http://", !GetAtt CFDistro.DomainName ]]