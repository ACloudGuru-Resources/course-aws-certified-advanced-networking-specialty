Parameters:
  NameOfService:
    Description: The tag name associated with this EC2 instances.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-09d069a04349dc3cb
Resources:
  LnEc2InstanceWebServer1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref NameOfService, 'webserver' ,'1'] ]
      SecurityGroups:
        - !Ref LnSecurityGroup
      AvailabilityZone: 'us-east-1a'
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash -xe\n",
            "yum update -y\n",
            "sudo /opt/aws/bin/cfn-init -v ", #use cfn-init to install packages in cloudformation init
            !Sub "--stack ${AWS::StackName} ",
            "--resource LnEc2InstanceWebServer1 ",
            "--configsets InstallAndConfigure ",
            !Sub "--region ${AWS::Region}",
            "\n"] ]
    Metadata:
        AWS::CloudFormation::Init:
          configSets: 
            InstallAndConfigure:
              - "config"
          config: 
            packages: 
              yum: 
                httpd: []
                php: []
                php-mysql: []
            files:
                "/var/www/html/index.php":
                  content: !Join [ "", [ 
                      "<?php\n",
                      "phpinfo();\n",
                      # "$servername = \"", !Ref RDSEndpoint, "\";\n",
                      # "$username = \"root\";\n",
                      # "$password = \"acloudguru\";\n",
                      # "$conn = new mysqli($servername, $username, $password);\n",
                      # "if ($conn->connect_error) { die(\"Connection failed: \" . $conn->connect_error); }\n",
                      # "echo \"<html><body><h1><center>The connection to RDS instance through peered VPC is successful. Congrats on successfully setting up the hands-on lab! Keep being awesome!</center></h1></body></html>\";\n",
                      "?>\n" ] ]
                  mode: "000644"
                  owner: "root"
                  group: "root"
            services: 
              sysvinit: 
                httpd: 
                  enabled: true
                  ensureRunning: true
  LnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to client host. Created using CloudFormation template.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: acg-ansible-course-sg
        - Key: Description
          Value: Security Group created for SSH and HTTP access to instances.
  LnElasticIp1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LnEc2InstanceWebServer1
  LnCLB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Instances:
      - Ref: LnEc2InstanceWebServer1
      Listeners: 
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '5'
        Timeout: '2'
      CrossZone: true
      LoadBalancerName: advnetspec-lab-clb
      AvailabilityZones: ['us-east-1a', 'us-east-1b']
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Sub '${AWS::StackName}', 'clb', 'advnetspec'] ]
Outputs:
  LnPublicIpAddressInstance1:
    Description: The Public IP address for EC2 instances
    Value: !GetAtt
      - LnEc2InstanceWebServer1
      - PublicIp
       
